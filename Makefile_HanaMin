# GlyphWiki Font Generator -*- mode: Makefile -*-

PROG	= .
PERL    = perl
AFDKO   = $(HOME)/bin/FDK/Tools/SharedData/FDKScripts/
PS2PDF  = ps2pdf
version = $(shell date "+%y.%m%d" | cut -c2-6)
sub	= A
spec	= '^u00[2-7][0-9a-f]$$:^u[2-9f][0-9a-f]{3}(-u[0-9a-f]{4,5})?(-(j[av]|kp|us|[ghjktuv]))?(-vert)?$$:^X0213(-u[0-9a-f]{4,5})?$$:^cdp-....$$'
# 下記を -S に設定すると、makeotf で subroutinze されるが、莫大な実行時間が必要になる。
subrtnz =

# ---

BASE    = HanaMin$(sub)
work	= ./$(BASE).work

dump.tar.gz:
	wget http://glyphwiki.org/dump.tar.gz

# 漢文 (U+319X) には '-vert' を追記する。
dump_all_versions.txt dump_newest_only.txt: dump.tar.gz
	tar xvfz dump.tar.gz dump_all_versions.txt dump_newest_only.txt
	touch dump_all_versions.txt
	$(PERL) -i -pe 's/^( u319[-0-9a-z]*)(.*)$$/\1\2\n\1-vert\2/' dump_newest_only.txt

# 空白文字を追記し、ufff[ef]を削除する。
$(BASE).map $(BASE).alias $(BASE).source: dump_all_versions.txt dump_newest_only.txt
	$(PERL) $(PROG)/dumpucs.pl "$(spec)" $(BASE)
	$(PERL) -pi -e '$$_="" if /^0ufff[ef]/' $(BASE).source
	echo "0u0020	0:0:0:0\n0u3000	0:0:0:0" >> $(BASE).source

$(BASE).svg: $(BASE).source
	-rm -rf $(work)
	./rhino $(PROG)/makesvg.js $(BASE)
	for file in $(work)/*.svg; do $(PERL) unionpoly.pl $$file; done
	$(PERL) $(PROG)/makeSVGFont.pl $(BASE) >$(BASE).log 2>$(BASE).err

$(BASE).pfa: $(BASE).svg
	tx -t1 $(BASE).svg $(BASE).pfa >>$(BASE).log 2>>$(BASE).err
	checkOutlines -e -k -O -x $(BASE).pfa >/dev/null 2>>$(BASE).err

$(BASE).dump: $(BASE).pfa
	tx -dump $(BASE).pfa > $(BASE).dump

$(BASE).fmndb $(BASE).cidinfo:
	sed -e s/\$$sub/$(sub)/ $(PROG)/template.fmndb > $(BASE).fmndb
	sed -e s/\$$sub/$(sub)/ -e s/\$$version/$(version)/ \
	  $(PROG)/template.cidinfo > $(BASE).cidinfo

$(BASE).tmp.cmap $(BASE).ivs $(BASE).cidmap $(BASE).tmp.features $(BASE).html: $(BASE).map $(BASE).alias $(BASE).dump
	emacs --script $(PROG)/gw-afdko.el $(BASE) >>$(BASE).log 2>>$(BASE).err

$(BASE).features : $(BASE).tmp.features
	cp $(BASE).tmp.features $(BASE).features
	sed -e s/\$$version/$(version)/ $(PROG)/template.tables >> $(BASE).features

$(BASE).cmap : $(BASE).tmp.cmap
	$(PERL) $(PROG)/cmap-tool.pl < $(BASE).tmp.cmap > $(BASE).cmap

$(BASE).raw: $(BASE).cidinfo $(BASE).cidmap $(BASE).pfa
	mergeFonts -cid $(BASE).cidinfo $(BASE).raw $(BASE).cidmap $(BASE).pfa >>$(BASE).log 2>>$(BASE).err

$(BASE).hinted.raw: $(BASE).raw
	$(PERL) $(AFDKO)/hintcidfont.pl $(PROG)/hintparam.txt < $(BASE).raw > $(BASE).hinted.raw
	autohint -r -q $(BASE).hinted.raw >>$(BASE).log 2>>$(BASE).err

$(BASE).otf: $(BASE).fmndb $(BASE).ivs $(BASE).cmap $(BASE).hinted.raw $(BASE).features
	makeotf $(subrtnz) -newNameID4 -mf $(BASE).fmndb -cs 1 -ci	\
	$(BASE).ivs -ch $(BASE).cmap -f $(BASE).hinted.raw -ff		\
	$(BASE).features -o $@

$(BASE).pdf: $(BASE).otf
	tx -pdf $(BASE).otf > $(BASE).pdf

$(BASE).proof.pdf: $(BASE).otf
	spot -Proof $(BASE).otf > $(BASE).proof.ps
	if [ -s $(BASE).proof.ps ]; then \
	  $(PS2PDF) $(BASE).proof.ps $(BASE).proof.pdf; \
	else \
	  touch $(BASE).proof.pdf; \
	fi

$(BASE).tar.xz: $(BASE).otf $(BASE).html $(BASE).proof.pdf $(BASE).pdf
	if [ -s $(BASE).proof.pdf ]; then \
	  tar cvfJ $(BASE).tar.xz $(BASE).otf $(BASE).html $(BASE).proof.pdf $(BASE).pdf $(BASE).cmap ; \
	else \
	  tar cvfJ $(BASE).tar.xz $(BASE).otf $(BASE).html $(BASE).pdf $(BASE).cmap ; \
	fi

.PHONY: otf proof pdf all clean distclean

otf: $(BASE).otf

proof: $(BASE).proof.pdf

pdf: $(BASE).pdf

all: otf

clean:
	-rm -rf $(work)
	find . \( -name "$(BASE).*" -not -name "*.pdf" -not -name "*.otf" -not -name "*.tar.xz" \) -exec rm {} \;
	rm checkOutlines.log* GlyphWiki-* current.fpr

distclean: clean
	rm -rf $(BASE).* dump*.txt Glyphwiki-* current.fpr checkOutlines.log* *.tar.gz
